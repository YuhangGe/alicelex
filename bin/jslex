#!/usr/bin/env node
var fs = require('fs');
var $ = require('util');
var _ = require('underscore');
var jslex = require('../src/jslex.js');

var opt = require('yargs')
    .usage('JSLex - Javascript lexical analyzers auto generator\nUsage: $0 [lex file] -f [template file] -o [output file]')
    .demand(['t'])
    .alias('o', 'output')
    .alias('t', 'template')
    .describe('o', 'output file generated')
    .describe('t', 'template file to use');
var argv = opt.argv;

if(argv._.length !== 1) {
    opt.showHelp();
    return;
}

if(!_.isString(argv._[0]) || _.isEmpty(argv._[0])) {
    console.log('Error: input lex file can not be empty!');
    return;
}
if(!_.isString(argv.template) || _.isEmpty(argv.template)) {
    console.log('Error: template file can not be empty!');
    return;
}
if(!fs.existsSync(argv._[0]) || !fs.statSync(argv._[0]).isFile()) {
    console.log('Error: input lex file `'+argv.file+'` not found!');
    return;
}
if(!fs.existsSync(argv.template) || !fs.statSync(argv.template).isFile()) {
    console.log('Error: template file `'+argv.template+'` not found!');
    return;
}

if(!_.isString(argv.output) || _.isEmpty(argv.output)) {
    argv.output = argv._[0] + '.js';
}

var output = jslex.parse(fs.readFileSync(argv._[0]).toString(), fs.readFileSync(argv.template).toString());

fs.writeFileSync(argv.output, output);

console.log('Done.');